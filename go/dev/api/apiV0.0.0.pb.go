// Code generated by protoc-gen-go.
// source: apiV0.0.0.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	apiV0.0.0.proto

It has these top-level messages:
	GlobalOptions
	Nil
	File
	Issue
	IssueRange
	Position
	Config
	Option
	Info
	SchemaVersion
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Really we just need a string lit here. Is that possible?
type SchemaVersionVersion int32

const (
	SchemaVersion_V000 SchemaVersionVersion = 0
)

var SchemaVersionVersion_name = map[int32]string{
	0: "V000",
}
var SchemaVersionVersion_value = map[string]int32{
	"V000": 0,
}

func (x SchemaVersionVersion) String() string {
	return proto.EnumName(SchemaVersionVersion_name, int32(x))
}

// Options available for all tenets that affect the entire review
type GlobalOptions struct {
	FindAll bool `protobuf:"varint,1,opt,name=findAll" json:"findAll,omitempty"`
}

func (m *GlobalOptions) Reset()         { *m = GlobalOptions{} }
func (m *GlobalOptions) String() string { return proto.CompactTextString(m) }
func (*GlobalOptions) ProtoMessage()    {}

// TODO(waigani) This is a work around. How do we call methods without args?
type Nil struct {
}

func (m *Nil) Reset()         { *m = Nil{} }
func (m *Nil) String() string { return proto.CompactTextString(m) }
func (*Nil) ProtoMessage()    {}

// File to be reviewed.
type File struct {
	// name of file.
	Name  string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Lines []int64 `protobuf:"varint,2,rep,name=lines" json:"lines,omitempty"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}

// Issue returned from a review.
type Issue struct {
	// The name of the issue.
	Name      string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Position  *IssueRange       `protobuf:"bytes,2,opt,name=position" json:"position,omitempty"`
	Comment   string            `protobuf:"bytes,3,opt,name=comment" json:"comment,omitempty"`
	CtxBefore string            `protobuf:"bytes,4,opt,name=ctxBefore" json:"ctxBefore,omitempty"`
	LineText  string            `protobuf:"bytes,5,opt,name=lineText" json:"lineText,omitempty"`
	CtxAfter  string            `protobuf:"bytes,6,opt,name=ctxAfter" json:"ctxAfter,omitempty"`
	Metrics   map[string]string `protobuf:"bytes,7,rep,name=metrics" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tags      []string          `protobuf:"bytes,8,rep,name=tags" json:"tags,omitempty"`
	Link      string            `protobuf:"bytes,9,opt,name=link" json:"link,omitempty"`
	NewCode   bool              `protobuf:"varint,10,opt,name=newCode" json:"newCode,omitempty"`
	Patch     string            `protobuf:"bytes,11,opt,name=patch" json:"patch,omitempty"`
	Err       string            `protobuf:"bytes,12,opt,name=err" json:"err,omitempty"`
}

func (m *Issue) Reset()         { *m = Issue{} }
func (m *Issue) String() string { return proto.CompactTextString(m) }
func (*Issue) ProtoMessage()    {}

func (m *Issue) GetPosition() *IssueRange {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Issue) GetMetrics() map[string]string {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type IssueRange struct {
	Start *Position `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End   *Position `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
}

func (m *IssueRange) Reset()         { *m = IssueRange{} }
func (m *IssueRange) String() string { return proto.CompactTextString(m) }
func (*IssueRange) ProtoMessage()    {}

func (m *IssueRange) GetStart() *Position {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *IssueRange) GetEnd() *Position {
	if m != nil {
		return m.End
	}
	return nil
}

type Position struct {
	Filename string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Offset   int64  `protobuf:"varint,2,opt,name=Offset" json:"Offset,omitempty"`
	Line     int64  `protobuf:"varint,3,opt,name=Line" json:"Line,omitempty"`
	Column   int64  `protobuf:"varint,4,opt,name=Column" json:"Column,omitempty"`
}

func (m *Position) Reset()         { *m = Position{} }
func (m *Position) String() string { return proto.CompactTextString(m) }
func (*Position) ProtoMessage()    {}

type Config struct {
	Options []*Option `protobuf:"bytes,1,rep,name=options" json:"options,omitempty"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}

func (m *Config) GetOptions() []*Option {
	if m != nil {
		return m.Options
	}
	return nil
}

type Option struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Usage string `protobuf:"bytes,3,opt,name=usage" json:"usage,omitempty"`
}

func (m *Option) Reset()         { *m = Option{} }
func (m *Option) String() string { return proto.CompactTextString(m) }
func (*Option) ProtoMessage()    {}

// Info contains metadata about this tenet.
type Info struct {
	Name        string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Usage       string    `protobuf:"bytes,2,opt,name=usage" json:"usage,omitempty"`
	Description string    `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	Version     string    `protobuf:"bytes,4,opt,name=version" json:"version,omitempty"`
	Tags        []string  `protobuf:"bytes,5,rep,name=tags" json:"tags,omitempty"`
	Metrics     []string  `protobuf:"bytes,6,rep,name=metrics" json:"metrics,omitempty"`
	Language    string    `protobuf:"bytes,7,opt,name=language" json:"language,omitempty"`
	Options     []*Option `protobuf:"bytes,8,rep,name=options" json:"options,omitempty"`
}

func (m *Info) Reset()         { *m = Info{} }
func (m *Info) String() string { return proto.CompactTextString(m) }
func (*Info) ProtoMessage()    {}

func (m *Info) GetOptions() []*Option {
	if m != nil {
		return m.Options
	}
	return nil
}

type SchemaVersion struct {
}

func (m *SchemaVersion) Reset()         { *m = SchemaVersion{} }
func (m *SchemaVersion) String() string { return proto.CompactTextString(m) }
func (*SchemaVersion) ProtoMessage()    {}

func init() {
	proto.RegisterType((*GlobalOptions)(nil), "api.GlobalOptions")
	proto.RegisterType((*Nil)(nil), "api.Nil")
	proto.RegisterType((*File)(nil), "api.File")
	proto.RegisterType((*Issue)(nil), "api.Issue")
	proto.RegisterType((*IssueRange)(nil), "api.IssueRange")
	proto.RegisterType((*Position)(nil), "api.Position")
	proto.RegisterType((*Config)(nil), "api.Config")
	proto.RegisterType((*Option)(nil), "api.Option")
	proto.RegisterType((*Info)(nil), "api.Info")
	proto.RegisterType((*SchemaVersion)(nil), "api.SchemaVersion")
	proto.RegisterEnum("api.SchemaVersionVersion", SchemaVersionVersion_name, SchemaVersionVersion_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Tenet service

type TenetClient interface {
	// Takes a stream of File to be reviewed and returns a stream of Issue.
	Review(ctx context.Context, opts ...grpc.CallOption) (Tenet_ReviewClient, error)
	// Info returns metadata about this tenet.
	GetInfo(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Info, error)
	// Returns the version of the api schema. // TODO(waigani) ideally, we'd
	// set a string literal here.
	APIVersion(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*SchemaVersion, error)
	// Set global options from the lingo CLI. As opposed to Configure below,
	// these options are not forwarded to tenet authors but rather change
	// the way the lingo CLI and tenets interact.
	SetGlobals(ctx context.Context, in *GlobalOptions, opts ...grpc.CallOption) (*Nil, error)
	// Configure the tenet with user defined options. These come either
	// from .lingo or passed in on the CLI.
	Configure(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Nil, error)
}

type tenetClient struct {
	cc *grpc.ClientConn
}

func NewTenetClient(cc *grpc.ClientConn) TenetClient {
	return &tenetClient{cc}
}

func (c *tenetClient) Review(ctx context.Context, opts ...grpc.CallOption) (Tenet_ReviewClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Tenet_serviceDesc.Streams[0], c.cc, "/api.Tenet/Review", opts...)
	if err != nil {
		return nil, err
	}
	x := &tenetReviewClient{stream}
	return x, nil
}

type Tenet_ReviewClient interface {
	Send(*File) error
	Recv() (*Issue, error)
	grpc.ClientStream
}

type tenetReviewClient struct {
	grpc.ClientStream
}

func (x *tenetReviewClient) Send(m *File) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tenetReviewClient) Recv() (*Issue, error) {
	m := new(Issue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tenetClient) GetInfo(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := grpc.Invoke(ctx, "/api.Tenet/GetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenetClient) APIVersion(ctx context.Context, in *Nil, opts ...grpc.CallOption) (*SchemaVersion, error) {
	out := new(SchemaVersion)
	err := grpc.Invoke(ctx, "/api.Tenet/APIVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenetClient) SetGlobals(ctx context.Context, in *GlobalOptions, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/api.Tenet/SetGlobals", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenetClient) Configure(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := grpc.Invoke(ctx, "/api.Tenet/Configure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tenet service

type TenetServer interface {
	// Takes a stream of File to be reviewed and returns a stream of Issue.
	Review(Tenet_ReviewServer) error
	// Info returns metadata about this tenet.
	GetInfo(context.Context, *Nil) (*Info, error)
	// Returns the version of the api schema. // TODO(waigani) ideally, we'd
	// set a string literal here.
	APIVersion(context.Context, *Nil) (*SchemaVersion, error)
	// Set global options from the lingo CLI. As opposed to Configure below,
	// these options are not forwarded to tenet authors but rather change
	// the way the lingo CLI and tenets interact.
	SetGlobals(context.Context, *GlobalOptions) (*Nil, error)
	// Configure the tenet with user defined options. These come either
	// from .lingo or passed in on the CLI.
	Configure(context.Context, *Config) (*Nil, error)
}

func RegisterTenetServer(s *grpc.Server, srv TenetServer) {
	s.RegisterService(&_Tenet_serviceDesc, srv)
}

func _Tenet_Review_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TenetServer).Review(&tenetReviewServer{stream})
}

type Tenet_ReviewServer interface {
	Send(*Issue) error
	Recv() (*File, error)
	grpc.ServerStream
}

type tenetReviewServer struct {
	grpc.ServerStream
}

func (x *tenetReviewServer) Send(m *Issue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tenetReviewServer) Recv() (*File, error) {
	m := new(File)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Tenet_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TenetServer).GetInfo(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Tenet_APIVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Nil)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TenetServer).APIVersion(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Tenet_SetGlobals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GlobalOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TenetServer).SetGlobals(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Tenet_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(TenetServer).Configure(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Tenet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Tenet",
	HandlerType: (*TenetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _Tenet_GetInfo_Handler,
		},
		{
			MethodName: "APIVersion",
			Handler:    _Tenet_APIVersion_Handler,
		},
		{
			MethodName: "SetGlobals",
			Handler:    _Tenet_SetGlobals_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Tenet_Configure_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Review",
			Handler:       _Tenet_Review_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

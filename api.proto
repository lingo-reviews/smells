// Copyright 3Roosters Ltd.

// To generate Go code: protoc apiV0.0.0.proto --go_out=plugins=grpc:api
// To generate Python code: protoc -I ./ --python_out=python/dev/api --plugin=protoc-gen-grpc=`which grpc_python_plugin` api.proto

syntax = "proto3";

option java_package = "io.grpc.examples";
option objc_class_prefix = "HLW";

package api;

// The Tenet service definition.
service Tenet {

	// Takes a stream of File to be reviewed and returns a stream of Issue.
	rpc Review(stream File) returns (stream Issue) {}

	// Info returns metadata about this tenet.
 	rpc GetInfo(Nil) returns (Info) {}

 	// Returns the version of the api schema. // TODO(waigani) ideally, we'd
 	// set a string literal here.
 	rpc APIVersion(Nil) returns (SchemaVersion) {}

	// Set global options from the lingo CLI. As opposed to Configure below,
	// these options are not forwarded to tenet authors but rather change
	// the way the lingo CLI and tenets interact.
	rpc SetGlobals(GlobalOptions) returns (Nil) {}

	// Configure the tenet with user defined options. These come either
	// from .lingo or passed in on the CLI.
	rpc Configure(Config) returns (Nil) {}
}

// Params // TODO(waigani) can this be in a sperate folder?

// Options available for all tenets that affect the entire review
message GlobalOptions {
	bool findAll = 1;
}

// TODO(waigani) This is a work around. How do we call methods without args?
message Nil {}

// File to be reviewed.
message File {
	// name of file.
	string name          = 1;
	repeated int64 lines = 2;
}

// Issue returned from a review.
message Issue {
  // The name of the issue.
    string name         =1; // Name is the the name of the checker that added the issue
	IssueRange position =2;    // position in source file
	string comment      =3;        // The rendered comment for this issue.
	string ctxBefore    =4;      // source lines before the problem line(s)
	string lineText     =5;    // the source line(s)
	string ctxAfter     =6;   // source lines after the problem line(s)
	map<string, string> metrics = 7; // metrics set when the issue was raised.
	repeated string tags =8; // tags added when the issue was raised.
	string link         =9; // (optional) the link to the style guide for the problem
	bool newCode        =10; // When checking a diff, this indicates if the issue was found in existing or new code.
	string patch        =11; // A diff patch resolving the issue.
	string err          =12; // Any err encounted while building the issue.

}

message IssueRange {
 Position start =1;
 Position end =2;
}

message Position  {
	string filename =1; // filename, if any
	int64 Offset     =2;  // offset, starting at 0
	int64 Line       =3;  // line number, starting at 1
	int64 Column     =4;  // column number, starting at 1 (byte count)
}

message Config {
	repeated Option options = 1;
}

message Option {
	string name   = 1;
	string value = 2; // TODO(waigani) this should be of type interface. Is that possible in proto?
	string usage = 3;
}

// Info contains metadata about this tenet.
message Info {
  	string name          = 1;
	string usage         = 2;
	string description   = 3;
	string version       = 4;
	repeated string tags = 5;
	repeated string metrics = 6; // TODO(waigani)  this should also be an interface.
	string language      = 7;
	repeated Option options = 8;
}

message SchemaVersion { 
	// Really we just need a string lit here. Is that possible?
	enum version {V000 = 0;}
}
